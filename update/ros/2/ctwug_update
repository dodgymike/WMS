:local name [/system identity get name]
:local serial [/system routerboard get serial-number]
:local rosver [/system resource get version]
:local cpu [/system resource get cpu]
:local cpufreq [/system resource get cpu-frequency]
:local arch [/system resource get architecture-name]
:local board [/system resource get board-name]
:local firmware [/system routerboard get current-firmware]
:local ver %ver%
:local upoln 0
:local rscript "ctwug.rsc"

/system scheduler
:foreach n in [find where name="ctwug_update_temp"] do={ remove $n }

:if ([/system script find name=ctwug_update] != "" ) do={
  :local upolicy [/system script get ctwug_update policy]
  :for i from=0 to=([:len $upolicy] -1) do={
    :local pflag [:pick $upolicy $i]
    :if ($pflag = "reboot") do={:set upoln ($upoln+1)}
    :if ($pflag = "read") do={:set upoln ($upoln+2)}
    :if ($pflag = "write") do={:set upoln ($upoln+4)}
    :if ($pflag = "policy") do={:set upoln ($upoln+8)}
    :if ($pflag = "test") do={:set upoln ($upoln+16)}
    :if ($pflag = "password") do={:set upoln ($upoln+32)}
    :if ($pflag = "sniff") do={:set upoln ($upoln+64)}
    :if ($pflag = "sensitive") do={:set upoln ($upoln+128)}
  }
}

:local path ("api/update?serial=".$serial."&ver=".$ver."&name=".$name."&rosver=".$rosver."&cpu=".$cpu."&cpufreq=".$cpufreq."&arch=".$arch."&board=".$board."&firmware=".$firmware."&policy=".$upoln)
:local apipath
:local fchar
:for i from=0 to=( [:len $path] - 1) do={
  :set fchar [:pick $path $i]
  :if ($fchar = " ") do={
    :set fchar "%20"
  }
  :set apipath ($apipath.$fchar)
}

/tool fetch address=wms.ctwug.za.net host=wms.ctwug.za.net src-path=$apipath dst-path=$rscript mode=http
:delay 3
:local temp [/file get $rscript size]
:if ( $temp > 2) do={
  /import $rscript
}
